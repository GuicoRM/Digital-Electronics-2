
Proyecto6_COUNTER_BI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  000006d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d8  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ec  00000000  00000000  00002965  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac5  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 * shows bar state Timer/Counter2 overflows and one custom characters.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 202:	89 e0       	ldi	r24, 0x09	; 9
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(11, 0);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('0');
 212:	80 e3       	ldi	r24, 0x30	; 48
 214:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(1, 1);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(' ');
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
	/******************* Custome character ******************************/
	// Position where we want to display
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 22c:	c1 e0       	ldi	r28, 0x01	; 1
 22e:	d1 e0       	ldi	r29, 0x01	; 1
 230:	09 e0       	ldi	r16, 0x09	; 9
 232:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 234:	89 91       	ld	r24, Y+
 236:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	/******************* Custome character ******************************/
	// Position where we want to display
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
 23a:	c0 17       	cp	r28, r16
 23c:	d1 07       	cpc	r29, r17
 23e:	d1 f7       	brne	.-12     	; 0x234 <main+0x40>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
	// Display first custom character
	lcd_gotoxy(11,1);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8b e0       	ldi	r24, 0x0B	; 11
 24a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Enable interrupt and set the overflow prescaler to 16 ms
    TIM2_overflow_16ms();
 254:	e1 eb       	ldi	r30, 0xB1	; 177
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	87 60       	ori	r24, 0x07	; 7
 25c:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 25e:	e0 e7       	ldi	r30, 0x70	; 112
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	81 60       	ori	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
	
	 // Configure 8-bit Timer/Counter2 for Stopwatch
	 // Enable interrupt and set the overflow prescaler to 16 ms
	 TIM0_overflow_16ms();
 268:	85 b5       	in	r24, 0x25	; 37
 26a:	8d 7f       	andi	r24, 0xFD	; 253
 26c:	85 bd       	out	0x25, r24	; 37
 26e:	85 b5       	in	r24, 0x25	; 37
 270:	85 60       	ori	r24, 0x05	; 5
 272:	85 bd       	out	0x25, r24	; 37
	 TIM0_overflow_interrupt_enable();
 274:	ee e6       	ldi	r30, 0x6E	; 110
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 27e:	78 94       	sei
 280:	ff cf       	rjmp	.-2      	; 0x280 <main+0x8c>

00000282 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <__vector_9+0x28>
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <__vector_9+0x2a>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;		// Tenths of a second
    static uint8_t secs = 0;        // Seconds
	static uint8_t mins = 0;        // Minutes
	
	char lcd_string[2] = " ";
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	9a 83       	std	Y+2, r25	; 0x02
 2b6:	89 83       	std	Y+1, r24	; 0x01
	char lcd_sqr[2] = " ";
 2b8:	9c 83       	std	Y+4, r25	; 0x04
 2ba:	8b 83       	std	Y+3, r24	; 0x03

    number_of_overflows++;
 2bc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <number_of_overflows.1951>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
	
    if (number_of_overflows >= 6)
 2c2:	86 30       	cpi	r24, 0x06	; 6
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <__vector_9+0x4a>
	static uint8_t mins = 0;        // Minutes
	
	char lcd_string[2] = " ";
	char lcd_sqr[2] = " ";

    number_of_overflows++;
 2c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <number_of_overflows.1951>
 2ca:	ce c0       	rjmp	.+412    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2cc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <number_of_overflows.1951>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2d0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tens.1952>
 2d4:	4a e0       	ldi	r20, 0x0A	; 10
 2d6:	be 01       	movw	r22, r28
 2d8:	6f 5f       	subi	r22, 0xFF	; 255
 2da:	7f 4f       	sbci	r23, 0xFF	; 255
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>

        /*TENTHS*/
		itoa(tens, lcd_string, 10);     // Convert decimal value to string
		lcd_gotoxy(7, 0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	87 e0       	ldi	r24, 0x07	; 7
 2e6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		
		tens++;
 2f2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tens.1952>
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
		
		if(tens >= 10){
 2f8:	8a 30       	cpi	r24, 0x0A	; 10
 2fa:	18 f4       	brcc	.+6      	; 0x302 <__vector_9+0x80>
        /*TENTHS*/
		itoa(tens, lcd_string, 10);     // Convert decimal value to string
		lcd_gotoxy(7, 0);
		lcd_puts(lcd_string);
		
		tens++;
 2fc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tens.1952>
 300:	b3 c0       	rjmp	.+358    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		
		if(tens >= 10){
			tens = 0;
 302:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tens.1952>
						
			secs++;
 306:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <secs.1953>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <secs.1953>
 310:	4a e0       	ldi	r20, 0x0A	; 10
 312:	be 01       	movw	r22, r28
 314:	6d 5f       	subi	r22, 0xFD	; 253
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	88 9f       	mul	r24, r24
 31a:	c0 01       	movw	r24, r0
 31c:	11 24       	eor	r1, r1
 31e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
			
			/*SQUARE OF SECONDS*/
			itoa(secs*secs, lcd_sqr, 10);     // Convert decimal value to string
			lcd_gotoxy(11, 0);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	8b e0       	ldi	r24, 0x0B	; 11
 326:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_sqr);	
 32a:	ce 01       	movw	r24, r28
 32c:	03 96       	adiw	r24, 0x03	; 3
 32e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			
			/*SECONDS*/
			if (secs >= 10){
 332:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <secs.1953>
 336:	8a 30       	cpi	r24, 0x0A	; 10
 338:	80 f0       	brcs	.+32     	; 0x35a <__vector_9+0xd8>
 33a:	4a e0       	ldi	r20, 0x0A	; 10
 33c:	be 01       	movw	r22, r28
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
				itoa(secs, lcd_string, 10);     // Convert decimal value to string 
				lcd_gotoxy(4, 0);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_string); 
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 358:	0f c0       	rjmp	.+30     	; 0x378 <__vector_9+0xf6>
 35a:	4a e0       	ldi	r20, 0x0A	; 10
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
				
			}else{
				itoa(secs, lcd_string, 10);     // Convert decimal value to string 
				lcd_gotoxy(5, 0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	85 e0       	ldi	r24, 0x05	; 5
 36c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_string); 
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
			}
			
			/*MINUTES*/
			if (secs >= 60){
 378:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <secs.1953>
 37c:	8c 33       	cpi	r24, 0x3C	; 60
 37e:	08 f4       	brcc	.+2      	; 0x382 <__vector_9+0x100>
 380:	73 c0       	rjmp	.+230    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				secs = 0;
 382:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <secs.1953>
 386:	4a e0       	ldi	r20, 0x0A	; 10
 388:	be 01       	movw	r22, r28
 38a:	6f 5f       	subi	r22, 0xFF	; 255
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
				itoa(secs, lcd_string, 10);     // Convert decimal value to string 
				lcd_gotoxy(4, 0);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_string);
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
				itoa(secs*secs, lcd_sqr, 10);     // Convert decimal value to string
 3a6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <secs.1953>
 3aa:	4a e0       	ldi	r20, 0x0A	; 10
 3ac:	be 01       	movw	r22, r28
 3ae:	6d 5f       	subi	r22, 0xFD	; 253
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	88 9f       	mul	r24, r24
 3b4:	c0 01       	movw	r24, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
				lcd_gotoxy(11, 0);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	8b e0       	ldi	r24, 0x0B	; 11
 3c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_sqr);
 3c4:	ce 01       	movw	r24, r28
 3c6:	03 96       	adiw	r24, 0x03	; 3
 3c8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
				lcd_gotoxy(12, 0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	8c e0       	ldi	r24, 0x0C	; 12
 3d0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_data(0x20);
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
				lcd_gotoxy(13, 0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	8d e0       	ldi	r24, 0x0D	; 13
 3de:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_data(0x20);
 3e2:	80 e2       	ldi	r24, 0x20	; 32
 3e4:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
				lcd_gotoxy(14, 0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	8e e0       	ldi	r24, 0x0E	; 14
 3ec:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_data(0x20);				 
 3f0:	80 e2       	ldi	r24, 0x20	; 32
 3f2:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
								
				mins++;	
 3f6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mins.1954>
 3fa:	8f 5f       	subi	r24, 0xFF	; 255
 3fc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mins.1954>
				if (mins >= 60){ 
 400:	8c 33       	cpi	r24, 0x3C	; 60
 402:	88 f0       	brcs	.+34     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
					mins = 0;
 404:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mins.1954>
					
					lcd_gotoxy(1, 0);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_putc('0');
 410:	80 e3       	ldi	r24, 0x30	; 48
 412:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
					lcd_gotoxy(2, 0);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_putc('0');					
 41e:	80 e3       	ldi	r24, 0x30	; 48
 420:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 424:	21 c0       	rjmp	.+66     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
					
				}else if (mins >= 10){
 426:	8a 30       	cpi	r24, 0x0A	; 10
 428:	80 f0       	brcs	.+32     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42a:	4a e0       	ldi	r20, 0x0A	; 10
 42c:	be 01       	movw	r22, r28
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
					itoa(mins, lcd_string, 10);     // Convert decimal value to string
					lcd_gotoxy(1, 0);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts(lcd_string);
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 448:	0f c0       	rjmp	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44a:	4a e0       	ldi	r20, 0x0A	; 10
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
				}else {
					itoa(mins, lcd_string, 10);     // Convert decimal value to string
					lcd_gotoxy(2, 0);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts(lcd_string);
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			}
			
		}		
		
    }
}
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_16>:
 * ISR starts when Timer/Counter0 overflows. Shows
 * bar state, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER0_OVF_vect)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 1;
	
	symbol++;		
 4b8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 4bc:	8f 5f       	subi	r24, 0xFF	; 255

	if(symbol >= 6){
 4be:	86 30       	cpi	r24, 0x06	; 6
 4c0:	18 f4       	brcc	.+6      	; 0x4c8 <__vector_16+0x32>
ISR(TIMER0_OVF_vect)
{
	static uint8_t symbol = 0;
	static uint8_t position = 1;
	
	symbol++;		
 4c2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 4c6:	6d c0       	rjmp	.+218    	; 0x5a2 <__vector_16+0x10c>

	if(symbol >= 6){
		
		symbol = 0;
 4c8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		
		if(position == 11){
 4cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4d0:	8b 30       	cpi	r24, 0x0B	; 11
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__vector_16+0x40>
 4d4:	4d c0       	rjmp	.+154    	; 0x570 <__vector_16+0xda>
			
			lcd_gotoxy(0, 1);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 4de:	80 e2       	ldi	r24, 0x20	; 32
 4e0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(1, 1);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(2, 1);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 4fa:	80 e2       	ldi	r24, 0x20	; 32
 4fc:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(3, 1);
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 508:	80 e2       	ldi	r24, 0x20	; 32
 50a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(4, 1);
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(5, 1);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	85 e0       	ldi	r24, 0x05	; 5
 520:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 524:	80 e2       	ldi	r24, 0x20	; 32
 526:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(6, 1);
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	86 e0       	ldi	r24, 0x06	; 6
 52e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(7, 1);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	87 e0       	ldi	r24, 0x07	; 7
 53c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 540:	80 e2       	ldi	r24, 0x20	; 32
 542:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(8, 1);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	88 e0       	ldi	r24, 0x08	; 8
 54a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(9, 1);
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	89 e0       	ldi	r24, 0x09	; 9
 558:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);
 55c:	80 e2       	ldi	r24, 0x20	; 32
 55e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
			lcd_gotoxy(10, 1);
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	8a e0       	ldi	r24, 0x0A	; 10
 566:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0x20);			
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>

		}
		
		if(position < 11){
 570:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 574:	8b 30       	cpi	r24, 0x0B	; 11
 576:	38 f4       	brcc	.+14     	; 0x586 <__vector_16+0xf0>
			lcd_gotoxy(position, 1);
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0xff);
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
 584:	09 c0       	rjmp	.+18     	; 0x598 <__vector_16+0x102>
		}else{
			position = 1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					
			lcd_gotoxy(position, 1);
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_data(0xff);
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
		}
		position++;
 598:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	
}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <__itoa_ncheck>:
 5c4:	bb 27       	eor	r27, r27
 5c6:	4a 30       	cpi	r20, 0x0A	; 10
 5c8:	31 f4       	brne	.+12     	; 0x5d6 <__itoa_ncheck+0x12>
 5ca:	99 23       	and	r25, r25
 5cc:	22 f4       	brpl	.+8      	; 0x5d6 <__itoa_ncheck+0x12>
 5ce:	bd e2       	ldi	r27, 0x2D	; 45
 5d0:	90 95       	com	r25
 5d2:	81 95       	neg	r24
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__utoa_common>

000005da <__utoa_ncheck>:
 5da:	bb 27       	eor	r27, r27

000005dc <__utoa_common>:
 5dc:	fb 01       	movw	r30, r22
 5de:	55 27       	eor	r21, r21
 5e0:	aa 27       	eor	r26, r26
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	aa 1f       	adc	r26, r26
 5e8:	a4 17       	cp	r26, r20
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <__utoa_common+0x14>
 5ec:	a4 1b       	sub	r26, r20
 5ee:	83 95       	inc	r24
 5f0:	50 51       	subi	r21, 0x10	; 16
 5f2:	b9 f7       	brne	.-18     	; 0x5e2 <__utoa_common+0x6>
 5f4:	a0 5d       	subi	r26, 0xD0	; 208
 5f6:	aa 33       	cpi	r26, 0x3A	; 58
 5f8:	08 f0       	brcs	.+2      	; 0x5fc <__utoa_common+0x20>
 5fa:	a9 5d       	subi	r26, 0xD9	; 217
 5fc:	a1 93       	st	Z+, r26
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	79 f7       	brne	.-34     	; 0x5e0 <__utoa_common+0x4>
 602:	b1 11       	cpse	r27, r1
 604:	b1 93       	st	Z+, r27
 606:	11 92       	st	Z+, r1
 608:	cb 01       	movw	r24, r22
 60a:	0c 94 07 03 	jmp	0x60e	; 0x60e <strrev>

0000060e <strrev>:
 60e:	dc 01       	movw	r26, r24
 610:	fc 01       	movw	r30, r24
 612:	67 2f       	mov	r22, r23
 614:	71 91       	ld	r23, Z+
 616:	77 23       	and	r23, r23
 618:	e1 f7       	brne	.-8      	; 0x612 <strrev+0x4>
 61a:	32 97       	sbiw	r30, 0x02	; 2
 61c:	04 c0       	rjmp	.+8      	; 0x626 <strrev+0x18>
 61e:	7c 91       	ld	r23, X
 620:	6d 93       	st	X+, r22
 622:	70 83       	st	Z, r23
 624:	62 91       	ld	r22, -Z
 626:	ae 17       	cp	r26, r30
 628:	bf 07       	cpc	r27, r31
 62a:	c8 f3       	brcs	.-14     	; 0x61e <strrev+0x10>
 62c:	08 95       	ret

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
