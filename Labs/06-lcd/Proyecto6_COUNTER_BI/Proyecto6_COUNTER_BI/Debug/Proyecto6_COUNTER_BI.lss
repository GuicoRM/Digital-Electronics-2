
Proyecto6_COUNTER_BI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000078c  00000820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800192  00800192  000008b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001836  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cd  00000000  00000000  00002212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab9  00000000  00000000  00002bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000568  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd2  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 39       	cpi	r26, 0x99	; 153
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 c4 03 	jmp	0x788	; 0x788 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 * shows bar state Timer/Counter2 overflows and one custom characters.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(COL1, 0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 202:	89 e3       	ldi	r24, 0x39	; 57
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(COL2, 0);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('0');
 212:	80 e3       	ldi	r24, 0x30	; 48
 214:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(COL1, 1);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(' ');
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
	/******************* Custome characters ******************************/
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 22c:	c9 e0       	ldi	r28, 0x09	; 9
 22e:	d1 e0       	ldi	r29, 0x01	; 1
 230:	09 e3       	ldi	r16, 0x39	; 57
 232:	11 e0       	ldi	r17, 0x01	; 1
	
	/*The codification of |, ||, |||, ||||, ||||| will be store in position 0, 1, 2, 3, 4 and 5 of CGRAM memory respectively*/
	for (uint8_t i = 0; i < 6*8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 234:	89 91       	ld	r24, Y+
 236:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	/******************* Custome characters ******************************/
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	
	/*The codification of |, ||, |||, ||||, ||||| will be store in position 0, 1, 2, 3, 4 and 5 of CGRAM memory respectively*/
	for (uint8_t i = 0; i < 6*8; i++)
 23a:	0c 17       	cp	r16, r28
 23c:	1d 07       	cpc	r17, r29
 23e:	d1 f7       	brne	.-12     	; 0x234 <main+0x40>
 240:	c1 e0       	ldi	r28, 0x01	; 1
 242:	d1 e0       	ldi	r29, 0x01	; 1
 244:	09 e0       	ldi	r16, 0x09	; 9
 246:	11 e0       	ldi	r17, 0x01	; 1
	
	/*The codification of 'table chess' character will be store in position 6 of CGRAM memory*/
	for (uint8_t j = 0; j < 8; j++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar2[j]);
 248:	89 91       	ld	r24, Y+
 24a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	
	/*The codification of 'table chess' character will be store in position 6 of CGRAM memory*/
	for (uint8_t j = 0; j < 8; j++)
 24e:	c0 17       	cp	r28, r16
 250:	d1 07       	cpc	r29, r17
 252:	d1 f7       	brne	.-12     	; 0x248 <main+0x54>
		// Store all new chars to memory line by line
		lcd_data(customChar2[j]);
	}
	
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
	// Position where we want to display
	lcd_gotoxy(COL2,1);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	8b e0       	ldi	r24, 0x0B	; 11
 25e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	
	// Display first custom character
	lcd_puts("I li");
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	/********************************************************************/

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Enable interrupt and set the overflow prescaler to 16 ms
    TIM2_overflow_16ms();
 26a:	e1 eb       	ldi	r30, 0xB1	; 177
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	87 60       	ori	r24, 0x07	; 7
 272:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 274:	e0 e7       	ldi	r30, 0x70	; 112
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24
	
	 // Configure 8-bit Timer/Counter2 for progress bar
	 // Enable interrupt and set the overflow prescaler to 16 ms
	 TIM0_overflow_16ms();
 27e:	85 b5       	in	r24, 0x25	; 37
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	85 bd       	out	0x25, r24	; 37
 284:	85 b5       	in	r24, 0x25	; 37
 286:	85 60       	ori	r24, 0x05	; 5
 288:	85 bd       	out	0x25, r24	; 37
	 TIM0_overflow_interrupt_enable();
 28a:	ee e6       	ldi	r30, 0x6E	; 110
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	81 60       	ori	r24, 0x01	; 1
 292:	80 83       	st	Z, r24
	 
	 // Configure 16-bit Timer/Counter1 for display a message
	 // Enable interrupt and set the overflow prescaler to 262 ms
	 TIM1_overflow_262ms();
 294:	e1 e8       	ldi	r30, 0x81	; 129
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8b 7f       	andi	r24, 0xFB	; 251
 29c:	80 83       	st	Z, r24
 29e:	80 81       	ld	r24, Z
 2a0:	83 60       	ori	r24, 0x03	; 3
 2a2:	80 83       	st	Z, r24
	 TIM1_overflow_interrupt_enable();
 2a4:	ef e6       	ldi	r30, 0x6F	; 111
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 2ae:	78 94       	sei
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <main+0xbc>

000002b2 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	00 d0       	rcall	.+0      	; 0x2da <__vector_9+0x28>
 2da:	00 d0       	rcall	.+0      	; 0x2dc <__vector_9+0x2a>
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	static uint8_t number_of_overflows = 0;
	static uint8_t tens = 1;		// Tenths of a second
	static uint8_t secs = 0;        // Seconds
	static uint8_t mins = 0;        // Minutes
	
	char lcd_string[2] = " ";
 2e0:	80 e2       	ldi	r24, 0x20	; 32
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9a 83       	std	Y+2, r25	; 0x02
 2e6:	89 83       	std	Y+1, r24	; 0x01
	char lcd_sqr[2] = " ";
 2e8:	9c 83       	std	Y+4, r25	; 0x04
 2ea:	8b 83       	std	Y+3, r24	; 0x03

	number_of_overflows++;
 2ec:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <number_of_overflows.1956>
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (number_of_overflows >= 6)
 2f2:	86 30       	cpi	r24, 0x06	; 6
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <__vector_9+0x4a>
	static uint8_t mins = 0;        // Minutes
	
	char lcd_string[2] = " ";
	char lcd_sqr[2] = " ";

	number_of_overflows++;
 2f6:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <number_of_overflows.1956>
 2fa:	d0 c0       	rjmp	.+416    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	
	if (number_of_overflows >= 6)
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
 2fc:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <number_of_overflows.1956>
		
		if(tens >= 10){
 300:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 304:	8a 30       	cpi	r24, 0x0A	; 10
 306:	08 f4       	brcc	.+2      	; 0x30a <__vector_9+0x58>
 308:	b3 c0       	rjmp	.+358    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			
			tens = 0;
 30a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			
			secs++;
 30e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <secs.1958>
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <secs.1958>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 318:	4a e0       	ldi	r20, 0x0A	; 10
 31a:	be 01       	movw	r22, r28
 31c:	6d 5f       	subi	r22, 0xFD	; 253
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	88 9f       	mul	r24, r24
 322:	c0 01       	movw	r24, r0
 324:	11 24       	eor	r1, r1
 326:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
			
			/*SQUARE OF SECONDS*/
			itoa(secs*secs, lcd_sqr, 10);     // Convert decimal value to string
			lcd_gotoxy(COL2, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	8b e0       	ldi	r24, 0x0B	; 11
 32e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_sqr);
 332:	ce 01       	movw	r24, r28
 334:	03 96       	adiw	r24, 0x03	; 3
 336:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			
			/*SECONDS*/
			if (secs >= 10){
 33a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <secs.1958>
 33e:	8a 30       	cpi	r24, 0x0A	; 10
 340:	80 f0       	brcs	.+32     	; 0x362 <__vector_9+0xb0>
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	be 01       	movw	r22, r28
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
				itoa(secs, lcd_string, 10);     // Convert decimal value to string
				lcd_gotoxy(4, 0);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	84 e0       	ldi	r24, 0x04	; 4
 354:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_string);
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 360:	0f c0       	rjmp	.+30     	; 0x380 <__vector_9+0xce>
 362:	4a e0       	ldi	r20, 0x0A	; 10
 364:	be 01       	movw	r22, r28
 366:	6f 5f       	subi	r22, 0xFF	; 255
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
				
			}else{
				itoa(secs, lcd_string, 10);     // Convert decimal value to string
				lcd_gotoxy(5, 0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	85 e0       	ldi	r24, 0x05	; 5
 374:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_string);
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
			}
			
			/*MINUTES*/
			if (secs >= 60){
 380:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <secs.1958>
 384:	8c 33       	cpi	r24, 0x3C	; 60
 386:	08 f4       	brcc	.+2      	; 0x38a <__vector_9+0xd8>
 388:	73 c0       	rjmp	.+230    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				secs = 0;
 38a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <secs.1958>
 38e:	4a e0       	ldi	r20, 0x0A	; 10
 390:	be 01       	movw	r22, r28
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
				
				itoa(secs, lcd_string, 10);     // Convert decimal value to string
				lcd_gotoxy(4, 0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_string);
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
				itoa(secs*secs, lcd_sqr, 10);     // Convert decimal value to string
 3ae:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <secs.1958>
 3b2:	4a e0       	ldi	r20, 0x0A	; 10
 3b4:	be 01       	movw	r22, r28
 3b6:	6d 5f       	subi	r22, 0xFD	; 253
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	88 9f       	mul	r24, r24
 3bc:	c0 01       	movw	r24, r0
 3be:	11 24       	eor	r1, r1
 3c0:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
				lcd_gotoxy(COL2, 0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	8b e0       	ldi	r24, 0x0B	; 11
 3c8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_sqr);
 3cc:	ce 01       	movw	r24, r28
 3ce:	03 96       	adiw	r24, 0x03	; 3
 3d0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
				lcd_gotoxy(12, 0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	8c e0       	ldi	r24, 0x0C	; 12
 3d8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_data(0x20);
 3dc:	80 e2       	ldi	r24, 0x20	; 32
 3de:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
				lcd_gotoxy(13, 0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	8d e0       	ldi	r24, 0x0D	; 13
 3e6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_data(0x20);
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
				lcd_gotoxy(14, 0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	8e e0       	ldi	r24, 0x0E	; 14
 3f4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_data(0x20);
 3f8:	80 e2       	ldi	r24, 0x20	; 32
 3fa:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
				
				mins++;
 3fe:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <mins.1959>
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <mins.1959>
				
				if (mins >= 60){
 408:	8c 33       	cpi	r24, 0x3C	; 60
 40a:	88 f0       	brcs	.+34     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
					mins = 0;
 40c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <mins.1959>
					
					lcd_gotoxy(COL1, 0);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_putc('0');
 418:	80 e3       	ldi	r24, 0x30	; 48
 41a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
					lcd_gotoxy(2, 0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_putc('0');
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 42c:	21 c0       	rjmp	.+66     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
					
				}else if (mins >= 10){
 42e:	8a 30       	cpi	r24, 0x0A	; 10
 430:	80 f0       	brcs	.+32     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 432:	4a e0       	ldi	r20, 0x0A	; 10
 434:	be 01       	movw	r22, r28
 436:	6f 5f       	subi	r22, 0xFF	; 255
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
					itoa(mins, lcd_string, 10);     // Convert decimal value to string
					lcd_gotoxy(COL1, 0);
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts(lcd_string);
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 450:	0f c0       	rjmp	.+30     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 452:	4a e0       	ldi	r20, 0x0A	; 10
 454:	be 01       	movw	r22, r28
 456:	6f 5f       	subi	r22, 0xFF	; 255
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
					
				}else {
					itoa(mins, lcd_string, 10);     // Convert decimal value to string
					lcd_gotoxy(2, 0);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts(lcd_string);
 468:	ce 01       	movw	r24, r28
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 470:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 474:	4a e0       	ldi	r20, 0x0A	; 10
 476:	be 01       	movw	r22, r28
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 8f 03 	call	0x71e	; 0x71e <__itoa_ncheck>
			
		}
		
		/*TENTHS*/
		itoa(tens, lcd_string, 10);     // Convert decimal value to string
		lcd_gotoxy(7, 0);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	87 e0       	ldi	r24, 0x07	; 7
 486:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 48a:	ce 01       	movw	r24, r28
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		
		tens++;
 492:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 496:	8f 5f       	subi	r24, 0xFF	; 255
 498:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
	}
}
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <__vector_16>:
 * ISR starts when Timer/Counter0 overflows. Update the progress bar on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER0_OVF_vect)
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	3f 93       	push	r19
 4d8:	4f 93       	push	r20
 4da:	5f 93       	push	r21
 4dc:	6f 93       	push	r22
 4de:	7f 93       	push	r23
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	af 93       	push	r26
 4e6:	bf 93       	push	r27
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 0;
	
	lcd_gotoxy(COL1 + position, 1);
 4ec:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <position.1968>
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(symbol);
 4f8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <symbol.1967>
 4fc:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
	symbol++;	
 500:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <symbol.1967>
 504:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(symbol >= 6){
 506:	86 30       	cpi	r24, 0x06	; 6
 508:	18 f4       	brcc	.+6      	; 0x510 <__vector_16+0x46>
	static uint8_t position = 0;
	
	lcd_gotoxy(COL1 + position, 1);
	lcd_putc(symbol);
	
	symbol++;	
 50a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <symbol.1967>
 50e:	14 c0       	rjmp	.+40     	; 0x538 <__vector_16+0x6e>
	
	if(symbol >= 6){
		symbol=0;
 510:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <symbol.1967>
		position++;
 514:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <position.1968>
 518:	8f 5f       	subi	r24, 0xFF	; 255
		
		if (position>=10)
 51a:	8a 30       	cpi	r24, 0x0A	; 10
 51c:	18 f4       	brcc	.+6      	; 0x524 <__vector_16+0x5a>
	
	symbol++;	
	
	if(symbol >= 6){
		symbol=0;
		position++;
 51e:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <position.1968>
 522:	0a c0       	rjmp	.+20     	; 0x538 <__vector_16+0x6e>
		
		if (position>=10)
		{
			position=0;
 524:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <position.1968>
			lcd_gotoxy(COL1, 1);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("          ");
 530:	86 e4       	ldi	r24, 0x46	; 70
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}
	}	
}
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Shows
 * 'I like DE2!', approximately two times per second
 */
ISR(TIMER1_OVF_vect)
{
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	2f 93       	push	r18
 566:	3f 93       	push	r19
 568:	4f 93       	push	r20
 56a:	5f 93       	push	r21
 56c:	6f 93       	push	r22
 56e:	7f 93       	push	r23
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
 574:	af 93       	push	r26
 576:	bf 93       	push	r27
 578:	ef 93       	push	r30
 57a:	ff 93       	push	r31
	static uint8_t number_of_overflows = 0;	
	static uint8_t h = 0;
	
	number_of_overflows++;
 57c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <number_of_overflows.1974>
 580:	8f 5f       	subi	r24, 0xFF	; 255
 582:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <number_of_overflows.1974>
	
	lcd_gotoxy(COL2, 1);
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	8b e0       	ldi	r24, 0x0B	; 11
 58a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	
	if (number_of_overflows >= 2)
 58e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <number_of_overflows.1974>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	08 f4       	brcc	.+2      	; 0x598 <__vector_13+0x3e>
 596:	b2 c0       	rjmp	.+356    	; 0x6fc <__vector_13+0x1a2>
	{	
		number_of_overflows=0;	
 598:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <number_of_overflows.1974>
		
		if (h==0){
 59c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 5a0:	81 11       	cpse	r24, r1
 5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <__vector_13+0x5e>
			lcd_puts(" lik");
 5a4:	81 e5       	ldi	r24, 0x51	; 81
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 5ac:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 5b6:	a2 c0       	rjmp	.+324    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 1){
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	51 f4       	brne	.+20     	; 0x5d0 <__vector_13+0x76>
			lcd_puts("like");
 5bc:	86 e5       	ldi	r24, 0x56	; 86
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;		
 5c4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 5ce:	96 c0       	rjmp	.+300    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 2){
 5d0:	82 30       	cpi	r24, 0x02	; 2
 5d2:	51 f4       	brne	.+20     	; 0x5e8 <__vector_13+0x8e>
			lcd_puts("ike ");
 5d4:	8b e5       	ldi	r24, 0x5B	; 91
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;	
 5dc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 5e0:	8f 5f       	subi	r24, 0xFF	; 255
 5e2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 5e6:	8a c0       	rjmp	.+276    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 3){
 5e8:	83 30       	cpi	r24, 0x03	; 3
 5ea:	51 f4       	brne	.+20     	; 0x600 <__vector_13+0xa6>
			lcd_puts("ke D");
 5ec:	80 e6       	ldi	r24, 0x60	; 96
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 5f4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 5fe:	7e c0       	rjmp	.+252    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 4){
 600:	84 30       	cpi	r24, 0x04	; 4
 602:	51 f4       	brne	.+20     	; 0x618 <__vector_13+0xbe>
			lcd_puts("e DE");
 604:	85 e6       	ldi	r24, 0x65	; 101
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 60c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 610:	8f 5f       	subi	r24, 0xFF	; 255
 612:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 616:	72 c0       	rjmp	.+228    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 5){
 618:	85 30       	cpi	r24, 0x05	; 5
 61a:	51 f4       	brne	.+20     	; 0x630 <__vector_13+0xd6>
			lcd_puts(" DE2");
 61c:	8a e6       	ldi	r24, 0x6A	; 106
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 624:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 628:	8f 5f       	subi	r24, 0xFF	; 255
 62a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 62e:	66 c0       	rjmp	.+204    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 6){
 630:	86 30       	cpi	r24, 0x06	; 6
 632:	51 f4       	brne	.+20     	; 0x648 <__vector_13+0xee>
			lcd_puts("DE2!");
 634:	8f e6       	ldi	r24, 0x6F	; 111
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 63c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 640:	8f 5f       	subi	r24, 0xFF	; 255
 642:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 646:	5a c0       	rjmp	.+180    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 7){
 648:	87 30       	cpi	r24, 0x07	; 7
 64a:	51 f4       	brne	.+20     	; 0x660 <__vector_13+0x106>
			lcd_puts("E2! ");
 64c:	84 e7       	ldi	r24, 0x74	; 116
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 654:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 658:	8f 5f       	subi	r24, 0xFF	; 255
 65a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 65e:	4e c0       	rjmp	.+156    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 8){
 660:	88 30       	cpi	r24, 0x08	; 8
 662:	51 f4       	brne	.+20     	; 0x678 <__vector_13+0x11e>
			lcd_puts("2!  ");
 664:	89 e7       	ldi	r24, 0x79	; 121
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 66c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 670:	8f 5f       	subi	r24, 0xFF	; 255
 672:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 676:	42 c0       	rjmp	.+132    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 9){
 678:	89 30       	cpi	r24, 0x09	; 9
 67a:	51 f4       	brne	.+20     	; 0x690 <__vector_13+0x136>
			lcd_puts("!   ");
 67c:	8e e7       	ldi	r24, 0x7E	; 126
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 684:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 68e:	36 c0       	rjmp	.+108    	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 10){
 690:	8a 30       	cpi	r24, 0x0A	; 10
 692:	51 f4       	brne	.+20     	; 0x6a8 <__vector_13+0x14e>
			lcd_puts("    ");
 694:	8c e4       	ldi	r24, 0x4C	; 76
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 69c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 6a6:	2a c0       	rjmp	.+84     	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 11){
 6a8:	8b 30       	cpi	r24, 0x0B	; 11
 6aa:	51 f4       	brne	.+20     	; 0x6c0 <__vector_13+0x166>
			lcd_puts("   I");
 6ac:	83 e8       	ldi	r24, 0x83	; 131
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 6b4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 6be:	1e c0       	rjmp	.+60     	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 12){
 6c0:	8c 30       	cpi	r24, 0x0C	; 12
 6c2:	51 f4       	brne	.+20     	; 0x6d8 <__vector_13+0x17e>
			lcd_puts("  I ");
 6c4:	88 e8       	ldi	r24, 0x88	; 136
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 6cc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 6d0:	8f 5f       	subi	r24, 0xFF	; 255
 6d2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 6d6:	12 c0       	rjmp	.+36     	; 0x6fc <__vector_13+0x1a2>
		}else if(h == 13){
 6d8:	8d 30       	cpi	r24, 0x0D	; 13
 6da:	51 f4       	brne	.+20     	; 0x6f0 <__vector_13+0x196>
			lcd_puts(" I l");
 6dc:	8d e8       	ldi	r24, 0x8D	; 141
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			h++;
 6e4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 6e8:	8f 5f       	subi	r24, 0xFF	; 255
 6ea:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <__vector_13+0x1a2>
		}else{
			h=0;
 6f0:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
			lcd_puts("I li");
 6f4:	81 e4       	ldi	r24, 0x41	; 65
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}				
	}
}
 6fc:	ff 91       	pop	r31
 6fe:	ef 91       	pop	r30
 700:	bf 91       	pop	r27
 702:	af 91       	pop	r26
 704:	9f 91       	pop	r25
 706:	8f 91       	pop	r24
 708:	7f 91       	pop	r23
 70a:	6f 91       	pop	r22
 70c:	5f 91       	pop	r21
 70e:	4f 91       	pop	r20
 710:	3f 91       	pop	r19
 712:	2f 91       	pop	r18
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <__itoa_ncheck>:
 71e:	bb 27       	eor	r27, r27
 720:	4a 30       	cpi	r20, 0x0A	; 10
 722:	31 f4       	brne	.+12     	; 0x730 <__itoa_ncheck+0x12>
 724:	99 23       	and	r25, r25
 726:	22 f4       	brpl	.+8      	; 0x730 <__itoa_ncheck+0x12>
 728:	bd e2       	ldi	r27, 0x2D	; 45
 72a:	90 95       	com	r25
 72c:	81 95       	neg	r24
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	0c 94 9b 03 	jmp	0x736	; 0x736 <__utoa_common>

00000734 <__utoa_ncheck>:
 734:	bb 27       	eor	r27, r27

00000736 <__utoa_common>:
 736:	fb 01       	movw	r30, r22
 738:	55 27       	eor	r21, r21
 73a:	aa 27       	eor	r26, r26
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	aa 1f       	adc	r26, r26
 742:	a4 17       	cp	r26, r20
 744:	10 f0       	brcs	.+4      	; 0x74a <__utoa_common+0x14>
 746:	a4 1b       	sub	r26, r20
 748:	83 95       	inc	r24
 74a:	50 51       	subi	r21, 0x10	; 16
 74c:	b9 f7       	brne	.-18     	; 0x73c <__utoa_common+0x6>
 74e:	a0 5d       	subi	r26, 0xD0	; 208
 750:	aa 33       	cpi	r26, 0x3A	; 58
 752:	08 f0       	brcs	.+2      	; 0x756 <__utoa_common+0x20>
 754:	a9 5d       	subi	r26, 0xD9	; 217
 756:	a1 93       	st	Z+, r26
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	79 f7       	brne	.-34     	; 0x73a <__utoa_common+0x4>
 75c:	b1 11       	cpse	r27, r1
 75e:	b1 93       	st	Z+, r27
 760:	11 92       	st	Z+, r1
 762:	cb 01       	movw	r24, r22
 764:	0c 94 b4 03 	jmp	0x768	; 0x768 <strrev>

00000768 <strrev>:
 768:	dc 01       	movw	r26, r24
 76a:	fc 01       	movw	r30, r24
 76c:	67 2f       	mov	r22, r23
 76e:	71 91       	ld	r23, Z+
 770:	77 23       	and	r23, r23
 772:	e1 f7       	brne	.-8      	; 0x76c <strrev+0x4>
 774:	32 97       	sbiw	r30, 0x02	; 2
 776:	04 c0       	rjmp	.+8      	; 0x780 <strrev+0x18>
 778:	7c 91       	ld	r23, X
 77a:	6d 93       	st	X+, r22
 77c:	70 83       	st	Z, r23
 77e:	62 91       	ld	r22, -Z
 780:	ae 17       	cp	r26, r30
 782:	bf 07       	cpc	r27, r31
 784:	c8 f3       	brcs	.-14     	; 0x778 <strrev+0x10>
 786:	08 95       	ret

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
