
Proyecto4_KR_Puls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2c  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f3  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018d  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  88:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
/*NO PULL*/
void GPIO_config_input_nopullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_config_input_pullup>:
}

/*PULL*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  a8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  aa:	80 81       	ld	r24, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_config_input_pullup+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_config_input_pullup+0xa>
  ba:	92 2f       	mov	r25, r18
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	80 83       	st	Z, r24
    *reg_name++;                    // Change pointer to Data Register
  c2:	80 81       	ld	r24, Z
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	28 2b       	or	r18, r24
  c8:	21 83       	std	Z+1, r18	; 0x01
  ca:	08 95       	ret

000000cc <GPIO_write_low>:
}

/*LOW*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  cc:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); // Clear the bit (and not)
  ce:	90 81       	ld	r25, Z
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <GPIO_write_low+0xe>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <GPIO_write_low+0xa>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	20 83       	st	Z, r18
  e4:	08 95       	ret

000000e6 <GPIO_write_high>:
}

/*HIGH*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num); // Set the bit (or)
  e6:	fc 01       	movw	r30, r24
  e8:	40 81       	ld	r20, Z
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_write_high+0xe>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_write_high+0xa>
  f8:	24 2b       	or	r18, r20
  fa:	20 83       	st	Z, r18
  fc:	08 95       	ret

000000fe <GPIO_toggle>:
}

/*TOGGLE*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num); // Toggle the bit
  fe:	fc 01       	movw	r30, r24
 100:	40 81       	ld	r20, Z
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <GPIO_toggle+0xe>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <GPIO_toggle+0xa>
 110:	24 27       	eor	r18, r20
 112:	20 83       	st	Z, r18
 114:	08 95       	ret

00000116 <GPIO_read>:
/*READ*/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	uint8_t result = 0;
	
	if (bit_is_clear(*reg_name, pin_num)){ // if 'PUSH' (0) -> I enter de 'if' -> Si hay un '0' (ACTIVO BAJO), entro en el 'if'
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
		result = 1;
	}
	
	return result;
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <GPIO_read+0xc>
 11e:	95 95       	asr	r25
 120:	87 95       	ror	r24
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <GPIO_read+0x8>
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	8f 27       	eor	r24, r31
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	08 95       	ret

0000012e <main>:
	/* 4 LED(s) are set to ACTIVE LOW mode as they are in Multi-function shield
	 * PUSH BUTTON is set to ACTIVE LOW mode
	 */
	
	/*************************************LED_D1******************************************/
    GPIO_config_output(&DDRB, LED_D1);
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	84 e2       	ldi	r24, 0x24	; 36
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	85 e2       	ldi	r24, 0x25	; 37
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	
	/*************************************LED_D2******************************************/
	GPIO_config_output(&DDRB, LED_D2);
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	84 e2       	ldi	r24, 0x24	; 36
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	GPIO_write_high(&PORTB, LED_D2);
 14c:	64 e0       	ldi	r22, 0x04	; 4
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	
	/*************************************LED_D3******************************************/
	GPIO_config_output(&DDRB, LED_D3);
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	84 e2       	ldi	r24, 0x24	; 36
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	GPIO_write_high(&PORTB, LED_D3);	
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	
	/*************************************LED_D4******************************************/
	GPIO_config_output(&DDRB, LED_D4);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	84 e2       	ldi	r24, 0x24	; 36
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	GPIO_write_high(&PORTB, LED_D4);
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	85 e2       	ldi	r24, 0x25	; 37
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	
	/***************************************BTN******************************************/
	GPIO_config_input_pullup(&DDRD, BTN);	
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8a e2       	ldi	r24, 0x2A	; 42
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_config_input_pullup>

    /*********************************TIMER/COUNTER1**************************************/
	/* Configuration of 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
		
		if(GPIO_read(&PIND, BTN) == 1){
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	89 e2       	ldi	r24, 0x29	; 41
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 8b 00 	call	0x116	; 0x116 <GPIO_read>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	71 f4       	brne	.+28     	; 0x1b2 <main+0x84>
			
			TIM1_overflow_262ms();
 196:	e1 e8       	ldi	r30, 0x81	; 129
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	8b 7f       	andi	r24, 0xFB	; 251
 19e:	80 83       	st	Z, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	83 60       	ori	r24, 0x03	; 3
 1a4:	80 83       	st	Z, r24
			TIM1_overflow_interrupt_enable();
 1a6:	ef e6       	ldi	r30, 0x6F	; 111
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 83       	st	Z, r24
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <main+0x9e>
			
		}else{
			
			TIM1_overflow_1s();
 1b2:	e1 e8       	ldi	r30, 0x81	; 129
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8c 7f       	andi	r24, 0xFC	; 252
 1ba:	80 83       	st	Z, r24
 1bc:	80 81       	ld	r24, Z
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	80 83       	st	Z, r24
			TIM1_overflow_interrupt_enable();
 1c2:	ef e6       	ldi	r30, 0x6F	; 111
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 83       	st	Z, r24
			
		}
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 1cc:	78 94       	sei
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0xa0>

000001d0 <__vector_13>:
/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter1 overflows. Toggle D1 LED on 
 * Multi-function shield. */
ISR(TIMER1_OVF_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	 static uint8_t a = 0;
	
	if((a == 0) | (a == 5)){	
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	81 11       	cpse	r24, r1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	91 11       	cpse	r25, r1
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <__vector_13+0x3c>
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	85 30       	cpi	r24, 0x05	; 5
 204:	09 f0       	breq	.+2      	; 0x208 <__vector_13+0x38>
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	99 23       	and	r25, r25
 20a:	f9 f0       	breq	.+62     	; 0x24a <__vector_13+0x7a>
			
		if (a == 5){
 20c:	85 30       	cpi	r24, 0x05	; 5
 20e:	69 f4       	brne	.+26     	; 0x22a <__vector_13+0x5a>
			
			GPIO_toggle(&PORTB, LED_D1);
 210:	65 e0       	ldi	r22, 0x05	; 5
 212:	85 e2       	ldi	r24, 0x25	; 37
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
			GPIO_toggle(&PORTB, LED_D2);
 21a:	64 e0       	ldi	r22, 0x04	; 4
 21c:	85 e2       	ldi	r24, 0x25	; 37
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
			a = 0;
 224:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 228:	3e c0       	rjmp	.+124    	; 0x2a6 <__vector_13+0xd6>
			
		}else{
			
			GPIO_toggle(&PORTB, LED_D1);
 22a:	65 e0       	ldi	r22, 0x05	; 5
 22c:	85 e2       	ldi	r24, 0x25	; 37
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
			GPIO_toggle(&PORTB, LED_D2);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
			a++;
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 248:	2e c0       	rjmp	.+92     	; 0x2a6 <__vector_13+0xd6>
		}
		
	}else if((a == 1) | (a == 4)){
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	09 f0       	breq	.+2      	; 0x252 <__vector_13+0x82>
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	91 11       	cpse	r25, r1
 254:	06 c0       	rjmp	.+12     	; 0x262 <__vector_13+0x92>
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	09 f0       	breq	.+2      	; 0x25e <__vector_13+0x8e>
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	99 23       	and	r25, r25
 260:	81 f0       	breq	.+32     	; 0x282 <__vector_13+0xb2>
		
		GPIO_toggle(&PORTB, LED_D2);
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
		GPIO_toggle(&PORTB, LED_D3);
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	85 e2       	ldi	r24, 0x25	; 37
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
		a++;
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 280:	12 c0       	rjmp	.+36     	; 0x2a6 <__vector_13+0xd6>
		
	}else if((a == 2) | (a == 3)){
 282:	82 50       	subi	r24, 0x02	; 2
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	78 f4       	brcc	.+30     	; 0x2a6 <__vector_13+0xd6>
		
		GPIO_toggle(&PORTB, LED_D3);
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
		GPIO_toggle(&PORTB, LED_D4);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	85 e2       	ldi	r24, 0x25	; 37
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_toggle>
		a++;
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
	}
		

}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
