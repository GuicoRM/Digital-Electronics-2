
Proyecto7_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000532  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  0080013c  0080013c  00000602  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001593  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9e  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a72  00000000  00000000  000027a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d8  00000000  00000000  000034c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bab  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_18>
  4c:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3c       	cpi	r26, 0xC1	; 193
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 97 02 	jmp	0x52e	; 0x52e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 21a:	8c e0       	ldi	r24, 0x0C	; 12
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("None");    // Put button name here
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX |= (1 << REFS0);
 242:	ec e7       	ldi	r30, 0x7C	; 124
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24

    // Set input channel to ADC0
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
 24c:	80 81       	ld	r24, Z
 24e:	80 7f       	andi	r24, 0xF0	; 240
 250:	80 83       	st	Z, r24

    // Enable ADC module
	ADCSRA |= (1 << ADEN);
 252:	ea e7       	ldi	r30, 0x7A	; 122
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
	ADCSRA |= (1 << ADIE);
 25c:	80 81       	ld	r24, Z
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	80 83       	st	Z, r24

    // Set clock prescaler to 128
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 262:	80 81       	ld	r24, Z
 264:	87 60       	ori	r24, 0x07	; 7
 266:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_262ms();
 268:	e1 e8       	ldi	r30, 0x81	; 129
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	80 83       	st	Z, r24
 272:	80 81       	ld	r24, Z
 274:	83 60       	ori	r24, 0x03	; 3
 276:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 278:	ef e6       	ldi	r30, 0x6F	; 111
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	

    // Enables interrupts by setting the global interrupt mask
    sei();
 282:	78 94       	sei
 284:	ff cf       	rjmp	.-2      	; 0x284 <main+0x98>

00000286 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	8f 93       	push	r24
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1 << ADSC);
 296:	ea e7       	ldi	r30, 0x7A	; 122
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	80 83       	st	Z, r24

}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	8f 91       	pop	r24
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <__vector_21+0x2c>
 2dc:	00 d0       	rcall	.+0      	; 0x2de <__vector_21+0x2e>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
    uint16_t value = 0;
	char lcd_string[4] = "0000";	// Maximum value is 1023 -> We need 4 character in DEC
 2e2:	80 e3       	ldi	r24, 0x30	; 48
 2e4:	90 e3       	ldi	r25, 0x30	; 48
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
 2ea:	9c 83       	std	Y+4, r25	; 0x04
 2ec:	8b 83       	std	Y+3, r24	; 0x03

	value = ADC;					// Copy ADC register result to 16-bit variable
 2ee:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2f2:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2f6:	4a e0       	ldi	r20, 0x0A	; 10
 2f8:	be 01       	movw	r22, r28
 2fa:	6f 5f       	subi	r22, 0xFF	; 255
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	c8 01       	movw	r24, r16
 300:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__itoa_ncheck>

	itoa (value, lcd_string, 10);	// Convert DEC value to string
	lcd_gotoxy(8,0);				// Display in position 'a'
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	88 e0       	ldi	r24, 0x08	; 8
 308:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("    ");				// Clear position 'a'
 30c:	87 e1       	ldi	r24, 0x17	; 23
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(8,0);				// Display in position 'a'
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 324:	40 e1       	ldi	r20, 0x10	; 16
 326:	be 01       	movw	r22, r28
 328:	6f 5f       	subi	r22, 0xFF	; 255
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	c8 01       	movw	r24, r16
 32e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__itoa_ncheck>

	itoa (value, lcd_string, 16);	// Convert HEX value to string
	lcd_gotoxy(13,0);				// Display in position 'b'
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	8d e0       	ldi	r24, 0x0D	; 13
 336:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("    ");				// Clear position 'b'
 33a:	87 e1       	ldi	r24, 0x17	; 23
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(13,0);				// Display in position 'b'
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 34a:	ce 01       	movw	r24, r28
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

	/**
	 * We will display in position 'c' which button is pushed
	 * AVR ADC module has 10-bit resolution with +/-2LSB accuracy
	 */
	lcd_gotoxy(8, 1);				// Display in position 'c'
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	88 e0       	ldi	r24, 0x08	; 8
 356:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("      ");				// Clear position 'c'
 35a:	85 e1       	ldi	r24, 0x15	; 21
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(8, 1);				// Display in position 'c'
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	88 e0       	ldi	r24, 0x08	; 8
 366:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>

	if(value <= 2){
 36a:	03 30       	cpi	r16, 0x03	; 3
 36c:	11 05       	cpc	r17, r1
 36e:	28 f4       	brcc	.+10     	; 0x37a <__vector_21+0xca>

		lcd_puts("Right");
 370:	8c e1       	ldi	r24, 0x1C	; 28
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 378:	34 c0       	rjmp	.+104    	; 0x3e2 <__vector_21+0x132>

	} else if ((value >= 99)&(value <= 103)){
 37a:	c8 01       	movw	r24, r16
 37c:	83 56       	subi	r24, 0x63	; 99
 37e:	91 09       	sbc	r25, r1
 380:	05 97       	sbiw	r24, 0x05	; 5
 382:	28 f4       	brcc	.+10     	; 0x38e <__vector_21+0xde>

		lcd_puts("Up");
 384:	82 e2       	ldi	r24, 0x22	; 34
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 38c:	2a c0       	rjmp	.+84     	; 0x3e2 <__vector_21+0x132>

	}else if ((value >= 243)&(value <= 247)){
 38e:	c8 01       	movw	r24, r16
 390:	83 5f       	subi	r24, 0xF3	; 243
 392:	91 09       	sbc	r25, r1
 394:	05 97       	sbiw	r24, 0x05	; 5
 396:	28 f4       	brcc	.+10     	; 0x3a2 <__vector_21+0xf2>

		lcd_puts("Down");
 398:	85 e2       	ldi	r24, 0x25	; 37
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3a0:	20 c0       	rjmp	.+64     	; 0x3e2 <__vector_21+0x132>

	}else if ((value >= 400)&(value <= 404)){
 3a2:	c8 01       	movw	r24, r16
 3a4:	80 59       	subi	r24, 0x90	; 144
 3a6:	91 40       	sbci	r25, 0x01	; 1
 3a8:	05 97       	sbiw	r24, 0x05	; 5
 3aa:	28 f4       	brcc	.+10     	; 0x3b6 <__vector_21+0x106>

		lcd_puts("Left");
 3ac:	8a e2       	ldi	r24, 0x2A	; 42
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3b4:	16 c0       	rjmp	.+44     	; 0x3e2 <__vector_21+0x132>

	}else if ((value >= 648)&(value <= 652)){
 3b6:	c8 01       	movw	r24, r16
 3b8:	88 58       	subi	r24, 0x88	; 136
 3ba:	92 40       	sbci	r25, 0x02	; 2
 3bc:	05 97       	sbiw	r24, 0x05	; 5
 3be:	28 f4       	brcc	.+10     	; 0x3ca <__vector_21+0x11a>

		lcd_puts("Select");
 3c0:	8f e2       	ldi	r24, 0x2F	; 47
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <__vector_21+0x132>

	}else if (value >= 1021){
 3ca:	0d 3f       	cpi	r16, 0xFD	; 253
 3cc:	13 40       	sbci	r17, 0x03	; 3
 3ce:	28 f0       	brcs	.+10     	; 0x3da <__vector_21+0x12a>

		lcd_puts("None");
 3d0:	80 e1       	ldi	r24, 0x10	; 16
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <__vector_21+0x132>

	}else{

		lcd_puts("ERROR");
 3da:	86 e3       	ldi	r24, 0x36	; 54
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	}

 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 428:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 42c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 430:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 432:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <UART_RxHead>
 436:	ef 5f       	subi	r30, 0xFF	; 255
 438:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 43a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <UART_RxTail>
 43e:	e9 17       	cp	r30, r25
 440:	39 f0       	breq	.+14     	; 0x450 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 442:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ef 5b       	subi	r30, 0xBF	; 191
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	20 83       	st	Z, r18
 44e:	01 c0       	rjmp	.+2      	; 0x452 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 450:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 452:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <__data_end>
 456:	89 2b       	or	r24, r25
 458:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 482:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <UART_TxHead>
 486:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART_TxTail>
 48a:	98 17       	cp	r25, r24
 48c:	69 f0       	breq	.+26     	; 0x4a8 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 48e:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <UART_TxTail>
 492:	ef 5f       	subi	r30, 0xFF	; 255
 494:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 496:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	ef 57       	subi	r30, 0x7F	; 127
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	80 81       	ld	r24, Z
 4a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 4a8:	e1 ec       	ldi	r30, 0xC1	; 193
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	8f 7d       	andi	r24, 0xDF	; 223
 4b0:	80 83       	st	Z, r24
    }
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__itoa_ncheck>:
 4c4:	bb 27       	eor	r27, r27
 4c6:	4a 30       	cpi	r20, 0x0A	; 10
 4c8:	31 f4       	brne	.+12     	; 0x4d6 <__itoa_ncheck+0x12>
 4ca:	99 23       	and	r25, r25
 4cc:	22 f4       	brpl	.+8      	; 0x4d6 <__itoa_ncheck+0x12>
 4ce:	bd e2       	ldi	r27, 0x2D	; 45
 4d0:	90 95       	com	r25
 4d2:	81 95       	neg	r24
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__utoa_common>

000004da <__utoa_ncheck>:
 4da:	bb 27       	eor	r27, r27

000004dc <__utoa_common>:
 4dc:	fb 01       	movw	r30, r22
 4de:	55 27       	eor	r21, r21
 4e0:	aa 27       	eor	r26, r26
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	aa 1f       	adc	r26, r26
 4e8:	a4 17       	cp	r26, r20
 4ea:	10 f0       	brcs	.+4      	; 0x4f0 <__utoa_common+0x14>
 4ec:	a4 1b       	sub	r26, r20
 4ee:	83 95       	inc	r24
 4f0:	50 51       	subi	r21, 0x10	; 16
 4f2:	b9 f7       	brne	.-18     	; 0x4e2 <__utoa_common+0x6>
 4f4:	a0 5d       	subi	r26, 0xD0	; 208
 4f6:	aa 33       	cpi	r26, 0x3A	; 58
 4f8:	08 f0       	brcs	.+2      	; 0x4fc <__utoa_common+0x20>
 4fa:	a9 5d       	subi	r26, 0xD9	; 217
 4fc:	a1 93       	st	Z+, r26
 4fe:	00 97       	sbiw	r24, 0x00	; 0
 500:	79 f7       	brne	.-34     	; 0x4e0 <__utoa_common+0x4>
 502:	b1 11       	cpse	r27, r1
 504:	b1 93       	st	Z+, r27
 506:	11 92       	st	Z+, r1
 508:	cb 01       	movw	r24, r22
 50a:	0c 94 87 02 	jmp	0x50e	; 0x50e <strrev>

0000050e <strrev>:
 50e:	dc 01       	movw	r26, r24
 510:	fc 01       	movw	r30, r24
 512:	67 2f       	mov	r22, r23
 514:	71 91       	ld	r23, Z+
 516:	77 23       	and	r23, r23
 518:	e1 f7       	brne	.-8      	; 0x512 <strrev+0x4>
 51a:	32 97       	sbiw	r30, 0x02	; 2
 51c:	04 c0       	rjmp	.+8      	; 0x526 <strrev+0x18>
 51e:	7c 91       	ld	r23, X
 520:	6d 93       	st	X+, r22
 522:	70 83       	st	Z, r23
 524:	62 91       	ld	r22, -Z
 526:	ae 17       	cp	r26, r30
 528:	bf 07       	cpc	r27, r31
 52a:	c8 f3       	brcs	.-14     	; 0x51e <strrev+0x10>
 52c:	08 95       	ret

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
